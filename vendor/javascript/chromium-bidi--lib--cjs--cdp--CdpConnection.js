import{a as e,e as s}from"../../../_/BQl9DXdy.js";import"mitt";var t={};Object.defineProperty(t,"__esModule",{value:true});t.MapperCdpClient=t.CloseError=void 0;const o=e;class CloseError extends Error{}t.CloseError=CloseError;class MapperCdpClient extends o.EventEmitter{#e;#s;constructor(e,s){super();this.#e=e;this.#s=s}get sessionId(){return this.#s}sendCommand(e,...s){return this.#e.sendCommand(e,s[0],this.#s)}isCloseError(e){return e instanceof CloseError}}t.MapperCdpClient=MapperCdpClient;var r={};var n;Object.defineProperty(r,"__esModule",{value:true});r.MapperCdpConnection=void 0;const i=s;const a=t;class MapperCdpConnection{static LOGGER_PREFIX_RECV=`${i.LogType.cdp}:RECV ◂`;static LOGGER_PREFIX_SEND=`${i.LogType.cdp}:SEND ▸`;#t;#o;#r=new Map;#n=new Map;#i;#a=0;constructor(e,s){this.#o=e;this.#i=s;this.#o.setOnMessage(this.#d);this.#t=this.#c(void 0)}close(){this.#o.close();for(const[,{reject:e,error:s}]of this.#n)e(s);this.#n.clear();this.#r.clear()}async createBrowserSession(){const{sessionId:e}=await this.#t.sendCommand("Target.attachToBrowserTarget");return this.#c(e)}getCdpClient(e){const s=this.#r.get(e);if(!s)throw new Error(`Unknown CDP session ID: ${e}`);return s}sendCommand(e,s,t){return new Promise(((o,r)=>{const d=this.#a++;this.#n.set(d,{sessionId:t,resolve:o,reject:r,error:new a.CloseError(`${e} ${JSON.stringify(s)} ${t??""} call rejected because the connection has been closed.`)});const c={id:d,method:e,params:s};t&&(c.sessionId=t);void this.#o.sendMessage(JSON.stringify(c))?.catch((e=>{this.#i?.(i.LogType.debugError,e);this.#o.close()}));this.#i?.(n.LOGGER_PREFIX_SEND,c)}))}#d=e=>{const s=JSON.parse(e);this.#i?.(n.LOGGER_PREFIX_RECV,s);if(s.method==="Target.attachedToTarget"){const{sessionId:e}=s.params;this.#c(e)}if(s.id!==void 0){const e=this.#n.get(s.id);this.#n.delete(s.id);e&&(s.result?e.resolve(s.result):s.error&&e.reject(s.error))}else if(s.method){const e=this.#r.get(s.sessionId??void 0);e?.emit(s.method,s.params||{});if(s.method==="Target.detachedFromTarget"){const{sessionId:e}=s.params;const t=this.#r.get(e);if(t){this.#r.delete(e);t.removeAllListeners()}for(const s of this.#n.values())s.sessionId===e&&s.reject(s.error)}}};
/**
   * Creates a new CdpClient instance for the given session ID.
   * @param sessionId either a string, or undefined for the main browser session.
   * The main browser session is used only to create new browser sessions.
   * @private
   */
#c(e){const s=new a.MapperCdpClient(this,e);this.#r.set(e,s);return s}}r.MapperCdpConnection=MapperCdpConnection;n=MapperCdpConnection;const d=r.__esModule;const c=r.MapperCdpConnection;export{c as MapperCdpConnection,d as __esModule,r as default};

