# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
require 'rspec/rails'
require 'cucumber/rspec/doubles'

require 'simplecov'
SimpleCov.start

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false
Cucumber::Rails::Database.autorun_database_cleaner = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.

# Drop emailbutler_messages caphive_agents admin_users impressions 
begin
  # These tables are excluded simply to make truncation faster. If you write tests which include these models then you should remove them from this list.
  DatabaseCleaner.strategy = [:truncation, except: %w[blazer_audits blazer_checks blazer_dashboard_queries   blazer_dashboards blazer_queries  active_admin_comments video_kycs taggings tags admin_users active_storage_attachments active_storage_blobs active_storage_variant_records user_alerts impressions activities exception_tracks impressions investment_snapshots messages nudges reminders payments holding_actions holding_audit_trails deal_docs share_transfers action_mailbox_inbound_emails admin_users allocation_runs audits call_fees caphive_agents devise_api_tokens document_chats emailbutler_messages favorites fees friendly_id_slugs key_biz_metrics permissions portfolio_scenarios quick_link_steps quick_links support_client_mappings whatsapp_logs]]

  Chewy.strategy :bypass

rescue NameError => e
  puts e.backtrace
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

Before do |scenario|
  DatabaseCleaner.start
  puts "Starting scenario: #{scenario.name}"
  puts "Capybara.app_host: #{Capybara.app_host}"
  puts "Capybara.server_host: #{Capybara.server_host}"
  puts "Capybara.server_port: #{Capybara.server_port}"
  Capybara.current_session.current_window.resize_to(1580, 900)
end

After do |scenario|
  DatabaseCleaner.clean

  if scenario.failed?
    puts scenario.location.to_s
    timestamp = "#{Time.zone.now.strftime('%Y-%m-%d-%H:%M:%S')}"
    screenshot_name = "screenshot-#{scenario.name.gsub("/","-")}-#{scenario.location.to_s}.png"
    screenshot_path = "#{Rails.root.join("tmp/cucumber")}/#{screenshot_name}"
    # Capybara.page.save_screenshot(screenshot_path, full: true)
  end
end

# Cucumber::Rails::Database.javascript_strategy = :truncation

Capybara.run_server = true
Capybara.server_port =  (3000 + ENV['TEST_ENV_NUMBER'].to_i)
# Capybara.default_max_wait_time = 5

Capybara.register_server :puma do |app, port, host|
  require 'puma'
  Puma::Server.new(app).tap do |s|
    s.add_tcp_listener host, (3000 + ENV['TEST_ENV_NUMBER'].to_i)
    puts "Starting Puma on #{host}:#{3000 + ENV['TEST_ENV_NUMBER'].to_i}"
  end.run.join
end

Capybara.server_host = "localhost"
Capybara.app_host = "http://localhost:#{3000 + ENV['TEST_ENV_NUMBER'].to_i}"


Capybara.register_driver(:playwright) do |app|
  driver = Capybara::Playwright::Driver.new(app, browser_type: :chromium, headless: ENV["BROWSER"].blank?, )    
  driver
end


Capybara.default_max_wait_time = 15
Capybara.default_driver = :playwright
Capybara.save_path = 'tmp/capybara'

# options = Selenium::WebDriver::Chrome::Options.new
# options.add_argument('--ignore-certificate-errors')
# options.add_argument('--disable-popup-blocking')
# options.add_argument('--disable-translate')
# options.add_argument('--disable-dev-shm-usage')
# options.add_argument('--enable-features=NetworkService,NetworkServiceInProcess')
# options.add_argument('--window-size=1583,900')


# if ENV['BROWSER'] == "true"
#   Capybara.register_driver :selenium do |app|
#     Capybara::Selenium::Driver.new(app, browser: :chrome, options: options)
#   end
#   Capybara.javascript_driver = :chrome #

#   Capybara.configure do |config|
#     config.default_max_wait_time = 10 # seconds
#     config.default_driver        = :selenium #
#   end
# else
#   options.add_argument('--headless')
#   Capybara.register_driver :selenium_chrome_headless do |app|
#     Capybara::Selenium::Driver.new(app, browser: :chrome, options: options)
#   end
#   Capybara.javascript_driver = :selenium_chrome_headless # :chrome #

#   Capybara.configure do |config|
#     config.default_max_wait_time = 10 # seconds
#     config.default_driver        = :selenium_chrome_headless # :selenium #
#   end
# end



module IRMUtils
  def key_values(model, args)
    puts "Setting #{args} on #{model.class} #{model.id}"
    key_val = args.split(";").map { |kv| kv.split("=") }.to_h
    key_val.each do |k, v|
      # model[k] = v
      puts "Setting #{k} to #{v} on #{model.class} #{model.id}"
      if k != "properties"
        model.send("#{k}=", v)
      else
        v.split(",").each do |prop|
          prop_key, prop_val = prop.split(":")
          model.properties[prop_key] = prop_val
          puts "Setting properties[#{prop_key}] = #{prop_val} on #{model.class} #{model.id} "
        end
      end
    end
  end

  def hash_key_values(model, args)
    key_val = args.split(";").to_h { |kv| kv.split("=") }
    key_val.each do |k, v|
      model[k] = v
    end
  end
end

World(IRMUtils)
