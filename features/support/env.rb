# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
require 'rspec/rails'

require 'simplecov'
SimpleCov.start

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.

begin
  DatabaseCleaner.strategy = :truncation
  Chewy.strategy :bypass

  # UserIndex.reset!
  # EntityIndex.reset!
  # InvestorIndex.reset!
rescue NameError => e
  puts e.backtrace
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

After do
  # DatabaseCleaner.clean
  Sidekiq.redis(&:flushdb)
  # UserIndex.reset!
  # EntityIndex.reset!
  # InvestorIndex.reset!
end

Cucumber::Rails::Database.javascript_strategy = :truncation

Capybara.run_server = true
Capybara.server_port = 3000
Capybara.default_max_wait_time = 5

Capybara.register_server :puma do |app, port, host|
  require 'puma'
  Puma::Server.new(app).tap do |s|
    s.add_tcp_listener host, port
  end.run.join
end

Capybara.server_host = "localhost"
Capybara.app_host = 'http://localhost:3000'

Capybara.register_driver :selenium do |app|
  Capybara::Selenium::Driver.new(app, browser: :chrome)
end

Capybara.javascript_driver = :chrome #:selenium_chrome_headless #:chrome #

Capybara.configure do |config|
  config.default_max_wait_time = 10 # seconds
  config.default_driver        = :selenium #:selenium_chrome_headless #:selenium #
end

module IRMUtils
  def key_values(entity, args)
    key_val = args.split(";").to_h { |kv| kv.split("=") }
    key_val.each do |k, v|
      entity[k] = v
    end
  end
end

World(IRMUtils)
