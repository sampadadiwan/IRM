<div class="row" data-controller="fund-formula">
  <div class="col-lg-6 mb-4">
    <%= render FormCard.new(title: "Fund Formula : #{fund_formula.name.presence || 'New'}") do %>

      <%= form_with(model: fund_formula) do |form| %>
        <% if fund_formula.errors.any? %>
          <div class="alert alert-danger">
            <h2><%= pluralize(fund_formula.errors.count, "error") %> prohibited this fund_formula from being saved:</h2>

            <ul>
              <% fund_formula.errors.each do |error| %>
                <li><%= error.full_message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>

          <%= form.text_field :fund_id, class: "form-control", hidden: true  %>
          <%= form.text_field :entity_id, class: "form-control", hidden: true  %>

        <div class="form-group">
          <%= form.label :name %>
          <%= form.text_field :name, class: "form-control" %>
        </div>

        <div class="form-group">
          <%= form.label :sequence %>
          <%= form.number_field :sequence, class: "form-control"  %>
        </div>

        <div class="form-group">
          <%= form.label :rule_type %>
          <%= form.select :rule_type, FundFormula::TYPES, {}, class: "form-control", data: {action: "change->fund-formula#ruleTypeChanged"}   %>
        </div>


        <div class="form-group">
          <%= form.label :rule_for %>
          <%= form.select :rule_for, FundFormula.rule_fors.invert, {}, class: "form-control" %>
        </div>

        <% if fund_formula.entity.entity_setting.formula_tag_list.present? %>
          <% tag_list = fund_formula.entity.entity_setting.formula_tag_list.split(",").map(&:strip) %>
          <div class="form-group">
            <%= form.label :tag_list %>
            <%= form.select :tag_list, tag_list, {include_hidden: false}, class: "form-control select2", multiple: true %>
          </div>
        <% end %>

        <div class="form-group">
          <%= form.label :entry_type %>
          <%= form.text_field :entry_type, class: "form-control", maxlength: 50  %>
          <small class="text-muted">Only for GenerateAccountEntry & CumulateAccountEntry, type of account entry to generate/cumulate</small>
        </div>

        <div class="form-group">
          <%= form.label :ai_description %>
          <%= form.text_area :ai_description, class: "form-control", disabled: true  %>
        </div>

        <div class="form-group">
          <%= form.label :description %>
          <%= form.text_area :description, class: "form-control"  %>
        </div>

        <div class="form-group">

          <div class="alert alert-info">
            <small>Please ensure proper spacing between formula tokens</small>
          </div>

          <%= form.label :formula %>
          <%= form.text_area :formula, class: "form-control #{'readonly-field' if !policy(fund_formula).create?}", readonly: !policy(fund_formula).create?, placeholder: "Read-only field"  %>

        </div>

        <div class="form-group">
          <%= form.label :meta_data %>
          <%= form.text_area :meta_data, class: "form-control"  %>
        </div>

        <div class="form-group">
            <%= form.label :generate_ytd_qtly, "Generate Additional Numbers" %>
            <%= form.check_box :generate_ytd_qtly, class: "form-check-input"  %>
            <small>Generate YTD, Quarterly, Since Inception numbers</small>
        </div>

        <div class="form-group">
            <%= form.label :roll_up %>
            <%= form.check_box :roll_up, class: "form-check-input" %>
            <small>Ensure that the entries are rolled up into an aggregate amount</small>
        </div>

        <div class="form-group">
            <%= form.label :enabled %>
            <%= form.check_box :enabled, class: "form-check-input"  %>
            <small>Enable which formulas will run</small>
        </div>

        <div class="form-group">
            <%= form.label :explain %>
            <%= form.check_box :explain, class: "form-check-input"  %>
            <small>Enable if this formula will be explained in detail</small>
        </div>

        <div class="form-group">
            <%= form.label :is_template %>
            <%= form.check_box :is_template, class: "form-check-input"  %>
            <small>Enable if this formula should show up on the right as a template</small>
        </div>

        <div class="form-group">
          <%= form.submit t_common(:save), {class: "btn btn-outline-primary"}%>
        </div>
      <% end %>

    <% end %>
  </div>

  <div class="col-lg-6 mb-4">
    <div class="row">
      <div class="col-12" data-controller="datatable ">
        <%= render FormCard.new(title: "Formula Templates") do %>
          <table class="table table-bordered dataTable jqDataTable">

            <thead>
              <th>Name</th>
              <th>Formula</th>
            </thead>

            <%
              templates =  fund_formula.new_record? ? FundFormula.templates : FundFormula.templates.where(name: fund_formula.name)

              templates = FundFormula.templates if templates.empty?
            %>

            <% templates.to_a.group_by(&:rule_type).each do |rule_type, formulas| %>
              <% formulas.each_with_index do |formula, index| %>
                <% attrs = formula.attributes.slice("name", "entry_type", "description", "formula", "rule_type", "rule_for", "roll_up").map{|k,v| ["fund_formula[#{k}]", v]}.to_h %>

                <tr class="explanation <%=rule_type%>">
                  <td><%= link_to formula.name, formula %></td>
                  <td>
                    <ul>
                      <li id="formula_<%="#{formula.id}"%>"> <%= formula.formula %></li>
                      <li>
                        <small class="text-muted"><%= formula.description %></small>
                        <span class="float-right">
                          <%= link_to "Clone", new_fund_formula_path(debug: true, "fund_formula[fund_id]": fund_formula.fund_id, **attrs), class: "btn btn-sm btn-primary" %>

                          <i class="fas fa-lg fa-copy text-primary" data-action="click->confirm#copy" data-target="#formula_<%="#{formula.id}"%>" data-notify="#imp_links_notice" title="Copy Formula"></i>
                        </span>
                      </li>
                    </ul>
                  </td>
                </tr>
              <% end %>
            <% end %>

          </table>
        <% end %>
      </div>

      <div class="col-12">
        <%= render FormCard.new(title: "Notes") do %>
          <table class="table table-bordered  dataTable">
            <thead>
              <th>Type</th>
              <th>Available variables for rule</th>
            </thead>
            <tr id="GeneratePortfolioNumbersForFund" class="explanation GeneratePortfolioNumbersForFund">
              <td>GeneratePortfolioNumbersForFund</td>
              <td>
                <ul>
                  <li> Sums up all the numbers for PortfolioInvestments across PortfolioCompany </li>
                  <li> The formula should be the list of fields like{ "Bought Amount" => :bought_amount_cents, "Cost Of Remaining" => :cost_of_remaining_cents, "Cost Of Sold" => :cost_of_sold_cents, "Sold Amount" => :sold_amount_cents, "FMV" => :fmv_cents, "Realized Gain" => :gain_cents, "Unrealized Gain" => :unrealized_gain_cents } or {} for all fields </li>
                </ul>
              </td>
            </tr>

            <tr id="AllocateForPortfolioCompany" class="explanation AllocateForPortfolioCompany">
              <td>AllocateForPortfolioCompany</td>
              <td>
                <ul>
                  <li> Rolls up the account entry for the name, for a portfolio company </li>
                  <li> The formula should be the parent type (PortfolioInvestment, AggregatePortfolioInvestment, etc) of the account entries to be rolled up </li>
                </ul>
              </td>
            </tr>

            <tr id="AllocateAccountEntry-Name" class="explanation AllocateAccountEntry-Name">
              <td>Allocate Account Entry</td>
              <td>
                <ul>
                  <li> Uses the specific fund account entry with the same <b>Name</b> as the rule and allocates it to each commitment </li>
                  <li>fund_account_entry: The specific fund account entry getting allocated</li>
                  <li>capital_commitment: This is the commitment to which the account entry will be allocated</li>
                  <li>fund_unit_setting: This is the FundUnitSetting for the unit type of the commitment</li>
                  <li>fund_formula: The formula currently being run</li>
                  <li>ae: The specific account entry being created for the commitment</li>
                </ul>
              </td>
            </tr>

            <tr id="AllocateAccountEntry-EntryType" class="explanation AllocateAccountEntry-EntryType">
              <td>Allocate Account Entry</td>
              <td>
                <ul>
                  <li> Uses the specific fund account entry with the same <b>EntryType</b> as the rule and allocates it to each commitment </li>
                  <li>fund_account_entry: The specific fund account entry getting allocated</li>
                  <li>capital_commitment: This is the commitment to which the account entry will be allocated</li>
                  <li>fund_unit_setting: This is the FundUnitSetting for the unit type of the commitment</li>
                  <li>fund_formula: The formula currently being run</li>
                  <li>ae: The specific account entry being created for the commitment</li>
                </ul>
              </td>
            </tr>

            <tr id="AllocateAggregatePortfolios" class="explanation AllocateAggregatePortfolios">
              <td>Allocate Aggregate Portfolio</td>
              <td>
                <ul>
                  <li> Uses each Aggregate Portfolio Entry and allocates it to each commitment </li>
                  <li>api: The Aggregate Portfolio Investment (for a specific portfolio company) which has data (quantity, bought_quantity, bought_amount, sold_quantity, sold_amount, avg_cost_cents, cost_of_sold_cents) up till end_date </li>
                  <li>capital_commitment: This is the commitment to which the account entry will be allocated</li>
                  <li>fund_unit_setting: This is the FundUnitSetting for the unit type of the commitment</li>
                  <li>fund_formula: The formula currently being run</li>
                  <li>ae: The specific account entry being created for the commitment</li>
                </ul>
              </td>
            </tr>

            <tr id="AllocatePortfolioInvestment" class="explanation AllocatePortfolioInvestment">
              <td>Allocate Portfolio</td>
              <td>
                <ul>
                  <li> Uses each Portfolio Investment and allocates it to each commitment </li>
                  <li>portfolio_investment: The Portfolio Investment (for a specific portfolio company) which has data (quantity, bought_quantity, bought_amount, sold_quantity, sold_amount, avg_cost_cents, cost_of_sold_cents) up till end_date </li>
                  <li>capital_commitment: This is the commitment to which the account entry will be allocated</li>
                  <li>fund_unit_setting: This is the FundUnitSetting for the unit type of the commitment</li>
                  <li>fund_formula: The formula currently being run</li>
                  <li>ae: The specific account entry being created for the commitment</li>
                </ul>
              </td>
            </tr>

            <tr id="GenerateAccountEntry" class="explanation GenerateAccountEntry">
              <td>Generate Account Entry</td>
              <td>
                <ul>
                  <li> Uses the formula to generate an account entry to each commitment </li>
                  <li>capital_commitment: This is the commitment to which the account entry will be allocated</li>
                  <li>fund_unit_setting: This is the FundUnitSetting for the unit type of the commitment</li>
                  <li>fund_formula: The formula currently being run</li>
                  <li>ae: The specific account entry being created for the commitment</li>
                </ul>
              </td>
            </tr>

            <tr id="CumulateAccountEntry" class="explanation CumulateAccountEntry">
              <td>Cumulate Account Entry</td>
              <td>
                <ul>
                  <li>No formula is applied here, it simply cumulates the given account entry for every commitment. Typically used for account entries which are uploaded per Folio e.x TDS</li>
                </ul>
              </td>
            </tr>

            <tr id="GenerateCustomField" class="explanation GenerateCustomField">
              <td>Generate Custom Field</td>
              <td>
                <ul>
                  <li>Does not create an Account Entry, but generates a variable with the name, which can be used in other rules</li>
                  <li>capital_commitment: This is the commitment to which the account entry will be allocated</li>
                  <li>fund_unit_setting: This is the FundUnitSetting for the unit type of the commitment</li>
                  <li>fund_formula: The formula currently being run</li>
                  <li>ae: The specific account entry being created for the commitment</li>
                </ul>
              </td>
            </tr>

            <tr id="Percentage" class="explanation Percentage">
              <td>Percentage</td>
              <td>
                <ul>
                  <li>No formula is applied here, it simply computes the percentage of the given account entry for every commitment. Typically used for account entries which are used in further computations such as 'Opening Investable Capital Percentage'</li>
                </ul>
              </td>
            </tr>

            <tr id="Other">
              <td>Other Variables Available</td>
              <td>
                <ul>
                  <li>@remittances: Remittances of the commitment till @end_date</li>
                  <li>@distributions: Distributions of the commitment till @end_date</li>
                  <li>@income_before_start_date: Income allocated to the commitment till @start_date</li>
                  <li>@expense_before_start_date: Expense allocated to the commitment till @start_date</li>
                  <li>@units: Units of the commitment till @start_date</li>
                </ul>
              </td>
            </tr>

          </table>
        <% end %>
      </div>
    </div>
  </div>
</div>
