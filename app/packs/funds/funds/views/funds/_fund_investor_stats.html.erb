<%
    fund ||= nil
    if fund     
        capital_commitments = policy_scope(fund.capital_commitments).includes(:fund, :investor) 
    else
        capital_commitments = policy_scope(CapitalCommitment).includes(:fund, :investor)
    end

    
    committed_amount =  capital_commitments.inject(0){|sum, cc| sum + cc.committed_amount }
    committed_amount = Money.new(committed_amount, fund.currency) if committed_amount == 0
    
    call_amount =  capital_commitments.inject(0){|sum, cc| sum + cc.call_amount }
    call_amount = Money.new(call_amount, fund.currency) if call_amount == 0
    
    collected_amount =  capital_commitments.inject(0){|sum, cc| sum + cc.collected_amount }
    collected_amount = Money.new(collected_amount, fund.currency) if collected_amount == 0
    
    distribution_amount =  capital_commitments.inject(0){|sum, cc| sum + cc.distribution_amount }
    distribution_amount = Money.new(distribution_amount, fund.currency) if distribution_amount == 0
    
%>

<%
cards_data = [  
  { path: nil, stat: money_to_currency(committed_amount, params), subtitle: "Committed", progress_bar_color: "warning" },
  { path: nil, stat: money_to_currency(call_amount, params), subtitle: "Called", progress_bar_color: "primary" },
  { path: nil, stat: money_to_currency(collected_amount, params), subtitle: "Collected", progress_bar_color: "danger" },
  { path: nil, stat: money_to_currency(distribution_amount, params), subtitle: "Distributed", progress_bar_color: "info" }
]

cards_data.insert(0, { path: nil, stat: fund.name, subtitle: "Name", progress_bar_color: "success" }) if fund 
%>

<div class="row">
    <% cards_data.each do |card_data| %>
    
        <%= render(NumberStatsComponent.new(
            path: card_data[:path],
            amount: card_data[:stat],
            subtitle: card_data[:subtitle],
            progress_bar_color: card_data[:progress_bar_color]
        )) %>

    <% end %>
</div>
