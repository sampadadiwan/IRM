<%

params[:force_units] = fund.default_currency_units

cards_data = [
  { path: nil, stat: money_to_currency(fund.committed_amount, params), subtitle: "Committed", progress_bar_color: "success" },
  { path: nil, stat: money_to_currency(fund.call_amount, params), subtitle: "Called", progress_bar_color: "warning" },
  { path: nil, stat: money_to_currency(fund.collected_amount, params), subtitle: "Collected", progress_bar_color: "danger" },
  { path: nil, stat: money_to_currency(fund.distribution_amount, params), subtitle: "Distributed", progress_bar_color: "info" },
  #{ path: nil, stat: money_to_currency(fund.committed_amount - fund.call_amount, params), subtitle: "Uncalled", progress_bar_color: "success" },
  # Only select the folios where the committed amount is greater than 0, to ensure transferred folios are not counted  
]

# Add the folio count to the cards_data array
cards_data << { path: nil, stat: fund.capital_commitments.where(committed_amount_cents: 1..).count, subtitle: "Folios", progress_bar_color: "warning" } if @fund.class == Fund
%>

<div class="row">
    <% cards_data.each do |card_data| %>

        <%= render(NumberStatsComponent.new(
            path: card_data[:path],
            amount: card_data[:stat],
            subtitle: card_data[:subtitle],
            progress_bar_color: card_data[:progress_bar_color]
        )) %>

    <% end %>
</div>


