
<% if portfolio_company %>
  <% cache_if(current_user != nil, cache_key(["api_stats", portfolio_company]), expires_in: 5.day) do %>
    <%

      if tracking_currency.present? && portfolio_company.entity.tracking_currency.present?
        target_currency = portfolio_company.entity.tracking_currency
      else
        target_currency = portfolio_company.entity.currency
      end

      params[:force_units] = force_units
      fields ||= []

      as_of_date = Date.current
      entity_id = portfolio_company.entity.id

      bought_amount_cents = portfolio_company.portfolio_investments.buys.sum do |pi|
        ExchangeRate.convert(pi.investment_instrument.currency, target_currency, pi.amount_cents, pi.investment_date, entity_id) || 0
      end
      sold_amount_cents = portfolio_company.portfolio_investments.sells.sum do |pi|
        ExchangeRate.convert(pi.investment_instrument.currency, target_currency, pi.amount_cents, pi.investment_date, entity_id) || 0
      end
      fmv_cents = portfolio_company.portfolio_investments.sum do |pi|
        ExchangeRate.convert(pi.investment_instrument.currency, target_currency, pi.fmv_cents, pi.investment_date, entity_id) || 0
      end
      cost_of_remaining_cents = portfolio_company.portfolio_investments.sum do |pi|
        ExchangeRate.convert(pi.investment_instrument.currency, target_currency, pi.cost_of_remaining_cents, pi.investment_date, entity_id) || 0
      end
      income_cents = portfolio_company.portfolio_cashflows.sum do |pc|
        ExchangeRate.convert(pc.investment_instrument.currency, target_currency, pc.amount_cents, pc.payment_date, entity_id) || 0
      end
      sold_plus_fmv_cents = sold_amount_cents + fmv_cents
    %>

    <%
      all_cards_data = [
        { path: nil, stat: money_to_currency(Money.new(bought_amount_cents, target_currency), params), subtitle: "Bought Amount", progress_bar_color: "success", text_info: "plus" },
        { path: nil, stat: money_to_currency(Money.new(sold_amount_cents, target_currency), params), subtitle: "Sold Amount", progress_bar_color: "danger", text_info: "minus" },
        { path: nil, stat: money_to_currency(Money.new(fmv_cents, target_currency), params), subtitle: "FMV", progress_bar_color: "info", text_info: "graph" },
        { path: nil, stat: money_to_currency(Money.new(cost_of_remaining_cents, target_currency), params), subtitle: "Cost Of Remaining", progress_bar_color: "success", text_info: "currency-dollar" },
        { path: nil, stat: money_to_currency(Money.new(income_cents, target_currency), params), subtitle: "Income", progress_bar_color: "warning", text_info: "cash" },
        { path: nil, stat: money_to_currency(Money.new(sold_plus_fmv_cents, target_currency), params), subtitle: "Sold + FMV", progress_bar_color: "success", text_info: "coins" }
      ]
      cards_data = fields.blank? ? all_cards_data : all_cards_data.select { |card| fields.include?(card[:subtitle]) }
    %>

    <div class="row">
      <% cards_data.each do |card_data| %>
        <%= render(NumberStatsComponent.new(
                    path: card_data[:path],
                    amount: card_data[:stat],
                    subtitle: card_data[:subtitle],
                    progress_bar_color: card_data[:progress_bar_color],
                    text_info: card_data[:text_info]
        )) %>
      <% end %>
    </div>

    <% params[:force_units] = nil %>
  <% end %>
<% end %>
