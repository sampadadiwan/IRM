<%#
# HasMany Show Partial

This partial renders a has_many relationship,
to be displayed on a resource's show page.

By default, the relationship is rendered
as a table of the first few associated resources.
The columns of the table are taken
from the associated resource class's dashboard.

## Local variables:

- `field`:
  An instance of [Administrate::Field::HasMany][1].
  Contains methods to help display a table of associated resources.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Field/HasMany
%>

<% if field.resources.any? %>
  <% field_name = field.name.to_s %>
  <% order = field.order_from_params(params[field_name] || {}) %>
  <% page_number = params.dig(field_name, "page") || 1 %>
  <% total_count = field.data.count %> <!-- This is the real total -->

  <%# Paginate using Pagy (requires controller to include Pagy::Backend) %>
  <%#  pagy(...) thinks it's paginating a full collection, but it’s only seeing a .limit(5) result from field.resources — so it thinks there's only 1 page.%>
  <%# %>
  <% @pagy = Pagy.new(count: total_count, page: page_number.to_i, items: 5, page_param: "#{field_name}[page]", limit: 5) %>
  <% paginated_resources = field.resources(page_number) %>

  <% associated_dashboard_class = "#{field.associated_class.name}Dashboard".constantize %>
  <% collection_presenter = Administrate::Page::Collection.new(associated_dashboard_class.new) %>

  <%= render(
    "collection",
    collection_presenter: collection_presenter,
    collection_field_name: field.name,
    page: page,
    resources: paginated_resources,
    table_title: field.name,
  ) %>

  <%= raw pagy_bootstrap_nav(@pagy, param_name: "#{field_name}[page]")  if @pagy  %>
  
<% else %>
  <%= t("administrate.fields.has_many.none", default: "–") %>
<% end %>
