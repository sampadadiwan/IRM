<% if params[:debug].present? && !@form_type.new_record? %>
  <%= render FormCard.new(title: "Rename Custom Field: #{@form_type.name}") do %>
    <div class="alert alert-info">
      Renaming a custom field will change the name of the field and the data stored for that custom field. Please do this only during off peak hours as it loads the DB with updates
    </div>
    <form action="/form_types/<%= @form_type.id %>/rename_fcf" method="post" class="row">
      <input type="hidden" name="_method" value="patch">
      <input type="hidden" name="id" value="<%= @form_type.id %>">
      <div class="col-5"><input type="text" name="old_name" class="form-control" placeholder="Old Name"></div>
      <div class="col-5"><input type="text" name="new_name" class="form-control" placeholder="New Name"></div>
      <div class="col-1"><button type="submit" class="btn btn-outline-primary ti ti-device-floppy"></button></div>
    </form>
  <% end %>
<% end %>

<%= render FormCard.new(title: "Customize: #{@form_type.name.presence || 'New'}") do %>

  <%= form_with(model: form_type, validate: true) do |form| %>
    <% if form_type.errors.any? %>
      <div class="alert alert-danger">
        <h2><%= pluralize(form_type.errors.count, "error") %> prohibited this form_type from being saved:</h2>

        <ul>
          <% form_type.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <%

      types = ["Investor", "SecondarySale", "Deal", "Offer", "Interest", "Document", "Task", "Valuation", "InvestorKpiMapping", "InvestmentOpportunity", "Fund", "CapitalCommitment", "CapitalCall", "CapitalRemittance", "Approval", "ApprovalResponse", "InvestorKyc", "IndividualKyc", "NonIndividualKyc", "FundUnitSetting", "AccountEntry", "AggregatePortfolioInvestment", "PortfolioInvestment", "User", "InvestmentInstrument", "DealInvestor", "KpiReport", "Kpi", "CapitalDistributionPayment", "CapitalDistribution", "CapitalRemittancePayment", "FundRatio", "FundReport"].sort

      types += [form_type.name] unless form_type.name.blank? || types.include?(form_type.name)

    %>

    <%= form.hidden_field :entity_id %>

    <%# If the Model for form type supports regulatory fields then shows that input  %>
    <div class="form-group">
      <%= form.label :name, "Form Name" %>
      <%= form.select :name, types.sort, {include_blank: true}, class: "form-control" %>
    </div>

    <div class="form-group">
      <%= form.label :tag %>
      <%= form.text_field :tag, class: "form-control" %>
    </div>

    <%# Regulatory env input is only visible on debug %>
    <% if params[:debug].present? %>
      <div class="form-group">
        <%= form.label :regulatory_env %>
        <%= form.text_field :reg_env, list: 'label-list', class: "form-control", maxlength: 50 %>
        <datalist id="label-list">
          <% FormCustomField::REGULATORY_ENVS.each do |label| %>
            <option value="<%= label %>"></option>
          <% end %>
        </datalist>
      </div>
    <% end %>

      <h1>Custom Fields</h1>
      <div id='form_custom_fields'>
        <%= form.fields_for :form_custom_fields do |field| %>
        <%# if field is calc or marked internal then its internal %>
          <% is_internal = field.object.field_type == "Calculation" || field.object.internal %>
          <% allowed = current_user.support? || params[:debug].present? || params[:internal].present? #|| Rails.env.local? %>

          <% if !is_internal || allowed %>
            <%= render 'form_custom_fields', f: field %>
          <% end %>
        <% end %>

        <div class='links'>
        </div>
      </div>

      <div class="form-group">
        <%= link_to_add_association '<i class="ti ti-plus"></i> Add Field'.html_safe, form, :form_custom_fields, class: "btn btn-outline-primary" %>
        <%= form.button type: 'submit', class: "btn btn-outline-primary" do %>
            <i class="ti ti-device-floppy"></i> <%= t_common(:save) %>
        <% end %>
      </div>
    </div>
  <% end %>

<% end %>
